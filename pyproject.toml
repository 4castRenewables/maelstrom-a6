[tool.poetry]
name = "a6"
version = "0.1.0"
description = "Tool to determine mode a6 in datasets"
packages = [{ include = "a6", from = "src" }]
authors = ["Fabian Emmerich <fabian.emmerich@4-cast.de>"]

[tool.poetry.scripts]
a6 = "a6.cli.main:cli"

[tool.poetry.dependencies]
python = ">=3.10,<3.12"
click = "^8.1.3"
Cartopy = "^0.21.0"
debugpy = "1.6.7"  # poetry fixes debugpy to 1.6.8, which is not available on pypi
docker = "^6"  # required by MLflow projects, not given in mlflow-skinny
ecmwflibs = "0.6.1" # cartopy dependency 0.4.3 not on pypi
hdbscan = "^0.8.28"
joblib = "1.1.0" # HDBSCAN import fails for joblib>1.1.0
matplotlib = "^3.5.1"
netCDF4 = "^1.5.8"
numpy = "^1.21.4"
opencv-python = "^4.7.0.68"
seaborn = "^0.11.2"
scikit-image = "^0.19.3"
scikit-learn = "^1.0.2"
scipy = "^1.9.2"
xarray = "^2023.7.0"
psutil = "^5.9.5"
mlflow = "2.2.2"
eccodes = "^1.6.1"
cfgrib = "^0.9.10.4"
dask = "^2023.9.3"
statsmodels = "^0.14.0"
pynvml = "^11.5.0"
opentsne = "^1.0.1"
torch = "^2.2.1"
torchvision = "^0.17.1"
mantik = "^0.4.6"

[tool.poetry.group.dev.dependencies]
pytest = "^6.2.5"
pre-commit = "^2.17.0"
pytest-cov = "^3.0.0"

[tool.poetry.group.notebooks.dependencies]
jupyter = "^1.0.0"
python-dotenv = "^0.20.0"
# Required to run Apptainer image as Jupyter kernel
ipykernel = "^6.26.0"
# Required by IPython (implicit dependency of ipykernel)
memory-profiler = "^0.61.0"

[tool.poetry.group.deep500.dependencies]
deep500 = {path = "./Deep500-for-MAELSTROM"}
cupy-cuda12x = "^13.0.0"


[tool.poetry.group.mpi.dependencies]
mpi4py = "^3.1.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "--cov=a6 --cov-report term-missing"

[tool.bandit]

[tool.black]
line-length = 80

[tool.flake8]
max-line-length = 80
per-file-ignores = [
    "__init__.py:F401,E501",
    "src/a6/dcv2/cluster.py:N806",
    "scripts/pca_k_means_scree_test.py:N803,N806",
]

[tool.mypy]
ignore_missing_imports = true

[tool.coverage]

[tool.coverage.report]
omit = [
    "*/testing/*",
]
exclude_lines = [
    'def __repr__',
    'def __str__',
    # Don't complain if tests don't hit defensive assertion code:
    'raise NotImplementedError',
    'return NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if __name__ == .__main__.:',
    # Don't complain about abstract methods, they aren't run:
    '@(abc\.)?abstractmethod',
]
